<?php
/**
 * PayZen V2-Payment Module version 1.2.0 for Drupal_Commerce 7.x-1.x. Support contact : support@payzen.eu.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author    Lyra Network (http://www.lyra-network.com/)
 * @copyright 2014-2017 Lyra Network and contributors
 * @license   http://www.gnu.org/licenses/gpl.html  GNU General Public License (GPL v3)
 * @category  payment
 * @package   payzen
 */

/**
 * @file
 * Implements PayZen payment services for use in Drupal Commerce.
 */

// Load PAYZEN API
include_once 'includes/PayzenApi.php';
include_once 'commerce_payzen.admin.inc';

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payzen_commerce_payment_method_info() {
    $payment_methods = array();

    // images base path
    $path = base_path() . drupal_get_path('module', 'commerce_payzen') . '/images';

    $display_title = payzen_t('Pay by credit card'); // you can update or unset method label here
    $display_img = '<img src="' . $path . '/payzen.png" alt="PayZen" class="commerce-payzen-logo" >';

    $payment_methods['payzen_standard'] = array(
        'base' => 'commerce_payzen_standard',
        'title' => payzen_t('PayZen - Standard payment'),
        'short_title' => payzen_t('PayZen - Standard payment'),
        'display_title' => $display_img . ' <span>' . $display_title . '</span>',
        'description' => payzen_t('Pay by credit card using PayZen payment platform.'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
        'callbacks' => array(
            'redirect_form' => 'commerce_payzen_redirect_form',
            'redirect_form_validate' => 'commerce_payzen_redirect_form_validate'
        )
    );

    $display_title = payzen_t('Pay by credit card in several times'); // you can update or unset method label here
    $display_img = '<img src="' . $path . '/payzen_multi.png" alt="PayZen" class="commerce-payzen-logo" >';

    $payment_methods['payzen_multi'] = array(
        'base' => 'commerce_payzen_multi',
        'title' => payzen_t('PayZen - Payment in installments'),
        'short_title' => payzen_t('PayZen - Payment in installments'),
        'display_title' => $display_img . ' <span>' . $display_title . '</span>',
        'description' => payzen_t('Pay by credit card in installments with PayZen payment platform.'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
        'callbacks' => array(
            'redirect_form' => 'commerce_payzen_redirect_form',
            'redirect_form_validate' => 'commerce_payzen_redirect_form_validate'
        )
    );

    $display_title = payzen_t('Pay with PayPal'); // you can update or unset method label here
    $display_img = '<img src="' . $path . '/paypal.png" alt="PayZen" class="commerce-payzen-logo" >';

    $payment_methods['payzen_paypal'] = array(
        'base' => 'commerce_payzen_paypal',
        'title' => payzen_t('PayZen - Payment with PayPal'),
        'short_title' => payzen_t('PayZen - Payment with PayPal'),
        'display_title' => $display_img . ' <span>' . $display_title . '</span>',
        'description' => payzen_t('Pay with PayPal using PayZen payment platform.'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
        'callbacks' => array(
            'redirect_form' => 'commerce_payzen_redirect_form',
            'redirect_form_validate' => 'commerce_payzen_redirect_form_validate'
        )
    );

    return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_payzen_menu() {
    $items = array();

    // define an always accessible path to receive PayZen IPN
    $items['commerce_payzen/process'] = array(
        'page callback' => 'commerce_payzen_process_ipn',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );

    return $items;
}

function commerce_payzen_settings_module_info() {
    global $base_url;

    $doc_name = 'Integration_PayZen_Drupal_Commerce_7.x-1.x_v1.2.0.pdf';

    $form = array(
        '#type' => 'fieldset',
        '#title' => payzen_t('Module information'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#attributes' => array(
            'class' => array('collapsible'),
        ),
        '#children' => '<table><tbody>
            <tr>
                <td style="width: 200px; text-align:right;">'.payzen_t('Developed by :') . '</td>
                <td><a href="http://www.lyra-network.com/" target="_blank">Lyra network</a></td>
            </tr>
            <tr>
                <td style="width: 200px; text-align:right;">'. payzen_t('Contact us :') .'</td>
                <td><a href="mailto:support@payzen.eu">support@payzen.eu</a></td>
            </tr>
            <tr>
                <td style="width: 200px; text-align:right;">'. payzen_t('Module version :') .'</td>
                <td>1.2.0</td>
            </tr>
            <tr>
                <td style="width: 200px; text-align:right;">'. payzen_t('Platform version :') .'</td>
                <td>V2</td>
            </tr>
            <tr>
                <td colspan="2">
                    <a href="' . $base_url . '/' . drupal_get_path('module', 'commerce_payzen').'/installation_doc/' . $doc_name . '"
                       target="_blank"
                       style="color: red; font_weight: bold;">' . payzen_t('CLICK HERE TO VIEW THE MODULE CONFIGURATION DOCUMENTATION') . '</a>
                </td>
            </tr>
        </tbody></table>'
    );

    return $form;
}

function commerce_payzen_gateway_access_settings($settings = NULL) {
    $settings = (array) $settings + array(
        'gateway_access' => array(
            'payzen_site_id' => '12345678',
            'payzen_key_test' => '1111111111111111',
            'payzen_key_prod' => '2222222222222222',
            'payzen_ctx_mode' => 'TEST',
            'payzen_platform_url' => 'https://secure.payzen.eu/vads-payment/'
        )
    );

    $form = array();

    // IPN URL to display
    $parts = array('commerce_payzen', 'process');
    $ipn_url = urldecode(url(implode('/', $parts), array('absolute' => TRUE)));

    $form['gateway_access'] = array(
        '#type' => 'fieldset',
        '#title' => payzen_t('Payment gateway access'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );
    $form['gateway_access']['payzen_site_id'] = array(
        '#type' => 'textfield',
        '#size' => '20',
        '#title' => payzen_t('Shop ID'),
        '#description' => payzen_t('The identifier provided by your bank.'),
        '#default_value' => $settings['gateway_access']['payzen_site_id'],
        '#required' => TRUE,
    );
    $form['gateway_access']['payzen_key_test'] = array(
        '#type' => 'textfield',
        '#size' => '30',
        '#title' => payzen_t('Certificate in test mode'),
        '#description' => payzen_t('Certificate provided by your bank for test (Available in your store Back Office).'),
        '#default_value' => $settings['gateway_access']['payzen_key_test'],
        '#required' => TRUE,
    );
    $form['gateway_access']['payzen_key_prod'] = array(
        '#type' => 'textfield',
        '#size' => '30',
        '#title' => payzen_t('Certificate in production mode'),
        '#description' => payzen_t('Certificate provided by your bank (available in your store Back Office after enabling production mode).'),
        '#default_value' => $settings['gateway_access']['payzen_key_prod'],
        '#required' => TRUE,
    );
    $form['gateway_access']['payzen_ctx_mode'] = array(
        '#type' => 'radios',
        '#title' => payzen_t('Mode'),
        '#description' => payzen_t('The context mode of this module.'),
        '#options' => payzen_ctx_mode_options(),
        '#default_value' => $settings['gateway_access']['payzen_ctx_mode'],
        '#required' => TRUE,
    );
    $form['gateway_access']['payzen_platform_url'] = array(
        '#type' => 'textfield',
        '#title' => payzen_t('Payment page URL'),
        '#description' => payzen_t('Link to the payment page.'),
        '#default_value' => $settings['gateway_access']['payzen_platform_url'],
        '#required' => TRUE,
    );
    $form['gateway_access']['payzen_ipn_url'] = array(
        '#type' => 'textfield',
        '#attributes' => array('readonly' => 'readonly'),
        '#title' => payzen_t('Instant Payment Notification URL to copy into your store Back Office:'),
        '#default_value' => $ipn_url
    );

    return $form;
}

function commerce_payzen_payment_page_settings($settings = NULL) {
    $settings = (array) $settings + array(
        'payment_page' => array(
            'payzen_language' => 'fr',
            'payzen_available_languages' => '',
            'payzen_capture_delay' => '',
            'payzen_validation_mode' => ''
        )
    );

    $form = array();

    $form['payment_page'] = array(
        '#type' => 'fieldset',
        '#title' => payzen_t('Payment page'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );
    $form['payment_page']['payzen_language'] = array(
        '#type' => 'select',
        '#title' => payzen_t('Default language'),
        '#description' => payzen_t('Default language on the payment page.'),
        '#options' => payzen_language_options(),
        '#default_value' => $settings['payment_page']['payzen_language'],
    );
    $form['payment_page']['payzen_available_languages'] = array(
        '#type' => 'select',
        '#multiple' => 'multiple',
        '#title' => payzen_t('Available languages'),
        '#description' => payzen_t('Languages available on the payment page. If you do not select any, all the supported languages will be available.'),
        '#options' => payzen_language_options(),
        '#default_value' => $settings['payment_page']['payzen_available_languages'],
    );
    $form['payment_page']['payzen_capture_delay'] = array(
        '#type' => 'textfield',
        '#size' => '20',
        '#title' => payzen_t('Capture delay'),
        '#description' => payzen_t('The number of days before the bank capture (adjustable in your store Back Office).'),
        '#default_value' => $settings['payment_page']['payzen_capture_delay'],
    );
    $form['payment_page']['payzen_validation_mode'] = array(
        '#type' => 'select',
        '#title' => payzen_t('Payment validation'),
        '#description' => payzen_t('If manual is selected, you will have to confirm payments manually in your bank Back Office.'),
        '#options' => payzen_validation_mode_options(),
        '#default_value' => $settings['payment_page']['payzen_validation_mode'],
    );

    return $form;
}

function commerce_payzen_selective_3ds_settings($settings = NULL) {
    $settings = (array) $settings + array(
        'selective_3ds' => array(
            'payzen_3ds_min' => ''
        )
    );

    $form = array();

    $form['selective_3ds'] = array(
        '#type' => 'fieldset',
        '#title' => payzen_t('Selective 3-DS'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );
    $form['selective_3ds']['payzen_3ds_min'] = array(
        '#type' => 'textfield',
        '#size' => '20',
        '#title' => payzen_t('Minimum amount to activate 3-DS'),
        '#description' => payzen_t('Needs subscription to Selective 3-D Secure option.'),
        '#default_value' => $settings['selective_3ds']['payzen_3ds_min'],
    );

    return $form;
}

function commerce_payzen_amount_restrictions_settings($settings = NULL) {
    $settings = (array) $settings + array(
        'amount_restrictions' => array(
            'payzen_amount_min' => '',
            'payzen_amount_max' => ''
        )
    );

    $form = array();

    $form['amount_restrictions'] = array(
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#title' => payzen_t('AMOUNT RESTRICTIONS')
    );
    $form['amount_restrictions']['payzen_amount_min'] = array(
        '#type' => 'textfield',
        '#title' => payzen_t('Minimum amount'),
        '#description' => payzen_t('Minimum amount to activate this payment method.'),
        '#default_value' => $settings['amount_restrictions']['payzen_amount_min']
    );
    $form['amount_restrictions']['payzen_amount_max'] = array(
        '#type' => 'textfield',
        '#title' => payzen_t('Maximum amount'),
        '#description' => payzen_t('Maximum amount to activate this payment method.'),
        '#default_value' => $settings['amount_restrictions']['payzen_amount_max']
    );

    return $form;
}

function commerce_payzen_return_to_shop_settings($settings = NULL) {
    $settings = (array) $settings + array(
        'return_to_shop' => array(
            'payzen_redirect_enabled' => '0',
            'payzen_redirect_success_timeout' => '5',
            'payzen_redirect_success_message' => 'Redirection vers la boutique dans quelques instants...',
            'payzen_redirect_error_timeout' => '5',
            'payzen_redirect_error_message' => 'Redirection vers la boutique dans quelques instants...',
            'payzen_return_mode' => 'GET'
        )
    );

    $form = array();

    $form['return_to_shop'] = array(
        '#type' => 'fieldset',
        '#title' => payzen_t('Return to shop'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE
    );
    $form['return_to_shop']['payzen_redirect_enabled'] = array(
        '#type' => 'radios',
        '#title' => payzen_t('Automatic redirection'),
        '#description' => payzen_t('If enabled, the buyer is automatically redirected to your site at the end of the payment.'),
        '#options' => payzen_automatic_forward_options(),
        '#default_value' => $settings['return_to_shop']['payzen_redirect_enabled'],
    );
    $form['return_to_shop']['payzen_redirect_success_timeout'] = array(
        '#type' => 'textfield',
        '#size' => '20',
        '#title' => payzen_t('Redirection timeout on success'),
        '#description' => payzen_t('Time in seconds (0-300) before the buyer is automatically redirected to your website after a successful payment.'),
        '#default_value' => $settings['return_to_shop']['payzen_redirect_success_timeout'],
    );
    $form['return_to_shop']['payzen_redirect_success_message'] = array(
        '#type' => 'textfield',
        '#title' => payzen_t('Redirection message on success'),
        '#description' => payzen_t('Message displayed on the payment page prior to redirection after a successful payment.'),
        '#default_value' => $settings['return_to_shop']['payzen_redirect_success_message']
    );
    $form['return_to_shop']['payzen_redirect_error_timeout'] = array(
        '#type' => 'textfield',
        '#size' => '20',
        '#title' => payzen_t('Redirection timeout on failure'),
        '#description' => payzen_t('Time in seconds (0-300) before the buyer is automatically redirected to your website after a declined payment.'),
        '#default_value' => $settings['return_to_shop']['payzen_redirect_error_timeout'],
    );
    $form['return_to_shop']['payzen_redirect_error_message'] = array(
        '#type' => 'textfield',
        '#title' => payzen_t('Redirection message on failure'),
        '#description' => payzen_t('Message displayed on the payment page prior to redirection after a declined payment.'),
        '#default_value' => $settings['return_to_shop']['payzen_redirect_error_message']
    );
    $form['return_to_shop']['payzen_return_mode'] = array(
        '#type' => 'select',
        '#title' => payzen_t('Return mode'),
        '#description' => payzen_t('Method that will be used for transmitting the payment result from the payment page to your shop.'),
        '#options' => payzen_return_mode_options(),
        '#default_value' => $settings['return_to_shop']['payzen_return_mode'],
    );

    return $form;
}

/**
 * Payment method callback: standard payment settings form.
 */
function commerce_payzen_standard_settings_form($settings = NULL) {
    $form = array();

    $form['info'] = commerce_payzen_settings_module_info();

    $form += commerce_payzen_gateway_access_settings($settings);
    $form += commerce_payzen_payment_page_settings($settings);

    $selected_cards = ($settings && isset($settings['payment_page']['payzen_payment_cards'])) ? $settings['payment_page']['payzen_payment_cards'] : '';
    $form['payment_page']['payzen_payment_cards'] = array(
        '#type' => 'select',
        '#multiple' => 'multiple',
        '#title' => payzen_t('Card types'),
        '#description' => payzen_t('The card type(s) that can be used for the payment. Select none to use platform configuration.'),
        '#options' => PayzenApi::getSupportedCardTypes(),
        '#default_value' => $selected_cards,
    );

    $form += commerce_payzen_selective_3ds_settings($settings);
    $form += commerce_payzen_amount_restrictions_settings($settings);
    $form += commerce_payzen_return_to_shop_settings($settings);

    return $form;
}

/**
 * Payment method callback: payment in installments settings form.
 */
function commerce_payzen_multi_settings_form($settings = NULL) {
    $form = array();

    $form['info'] = commerce_payzen_settings_module_info();

    $form += commerce_payzen_gateway_access_settings($settings);
    $form += commerce_payzen_payment_page_settings($settings);

    $selected_cards = ($settings && isset($settings['payment_page']['payzen_payment_cards'])) ? $settings['payment_page']['payzen_payment_cards'] : '';
    $form['payment_page']['payzen_payment_cards'] = array(
        '#type' => 'select',
        '#multiple' => 'multiple',
        '#title' => payzen_t('Card types'),
        '#description' => payzen_t('The card type(s) that can be used for the payment. Select none to use platform configuration.'),
        '#options' => commerce_payzen_multi_cards(),
        '#default_value' => $selected_cards,
    );

    $form += commerce_payzen_selective_3ds_settings($settings);
    $form += commerce_payzen_amount_restrictions_settings($settings);

    // multi payment options
    $form['payment_options'] = array(
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#title' => payzen_t('PAYMENT OPTIONS')
    );

    $options = ($settings && isset($settings['payment_options']['payzen_multi_options'])) ? $settings['payment_options']['payzen_multi_options'] : '';
    $cb_avail = key_exists('CB', commerce_payzen_multi_cards());
    $form['payment_options']['payzen_multi_options'] = array(
        '#type' => 'textarea',
        '#theme' => 'commerce_payzen_backend_multi_options',
        '#title' => payzen_t('Payment options'),
        '#description' => $cb_avail ?
            payzen_t('Click on &laquo;Add&raquo; button to configure one or more payment options. <br /><b>Label : </b>The option label to display on the frontend. <br /><b>Min. amount : </b>Minimum amount to enable the payment option. <br /><b>Max. amount : </b>Maximum amount to enable the payment option. <br /><b>Contract : </b>ID of the contract to use with the option. <br /><b>Count : </b>Total number of payments. <br /><b>Period : </b>Delay (in days) between payments. <br /><b>1st payment : </b>Amount of first payment, in percentage of total amount. If empty, all payments will have the same amount.') :
            payzen_t('Click on &laquo;Add&raquo; button to configure one or more payment options. <br /><b>Label : </b>The option label to display on the frontend. <br /><b>Min. amount : </b>Minimum amount to enable the payment option. <br /><b>Max. amount : </b>Maximum amount to enable the payment option. <br /><b>Count : </b>Total number of payments. <br /><b>Period : </b>Delay (in days) between payments. <br /><b>1st payment : </b>Amount of first payment, in percentage of total amount. If empty, all payments will have the same amount.'),
        '#default_value' => $options,
        '#element_validate' => array('commerce_payzen_multi_settings_options_validate'),
    );

    $form += commerce_payzen_return_to_shop_settings($settings);

    return $form;
}

function commerce_payzen_multi_settings_options_validate($element, &$form_state, $form) {
    if (isset($form_state['input']['parameter']['payment_method']['settings']['payment_method']['settings']['payment_options']['payzen_multi_options'])) {
        $value = $form_state['input']['parameter']['payment_method']['settings']['payment_method']['settings']['payment_options']['payzen_multi_options'];

        if (! is_array($value)) {
            $value = array();
        }

        foreach ($value as $key => $option) {
            if (! $option['label'] // validate payment options
                || ! is_numeric($option['count'])
                || ! is_numeric($option['period'])
                || ($option['first'] && ! is_numeric($option['first']))
                || $option['first'] < 0 || $option['first'] > 100) {

                unset($value[$key]);

                drupal_set_message(payzen_t('One or more values are invalid for field « Payment options ». Only valid entries are saved.'), 'warning');
            }
        }

        $form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['payment_options']['payzen_multi_options'] = json_encode($value);
    }
}

function commerce_payzen_multi_cards() {
    $multi_cards = array(
        'AMEX', 'CB', 'DINERS', 'DISCOVER', 'E-CARTEBLEUE', 'JCB', 'MASTERCARD',
        'PRV_BDP', 'PRV_BDT', 'PRV_OPT', 'PRV_SOC', 'VISA', 'VISA_ELECTRON'
    );

    $all_cards = PayzenApi::getSupportedCardTypes();
    $avail_cards = array();

    foreach ($all_cards as $key => $value) {
        if (in_array($key, $multi_cards)) {
            $avail_cards[$key] = $value;
        }
    }

    return $avail_cards;
}

/**
 * Implements hook_theme().
 */
function commerce_payzen_theme() {
    return array(
        'commerce_payzen_backend_multi_options' => array(
            'render element' => 'element',
            'file' => 'commerce_payzen.admin.inc',
        )
    );
}

function commerce_payzen_multi_options($row_value, $order_total = NULL) {
    $options = @json_decode($row_value, TRUE);

    if (! is_array($options) || empty($options)) {
        return array();
    }

    if (! $order_total) {
        return $options;
    }

    $available_options = array();
    foreach ($options as $key => $option) {
        $amount_min = $option['amount_min'];
        $amount_max = $option['amount_max'] ;

        if (($amount_max && $order_total > $amount_max) || ($amount_min && $order_total < $amount_min)) {
            continue;
        }

        $available_options[$key] = $option;
    }

    return $available_options;
}

/**
 * Payment method callback: PayPal payment settings form.
 */
function commerce_payzen_paypal_settings_form($settings = NULL) {
    $form = array();

    $form['info'] = commerce_payzen_settings_module_info();

    $form += commerce_payzen_gateway_access_settings($settings);
    $form += commerce_payzen_payment_page_settings($settings);
    $form += commerce_payzen_selective_3ds_settings($settings);
    $form += commerce_payzen_amount_restrictions_settings($settings);
    $form += commerce_payzen_return_to_shop_settings($settings);

    return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_payzen_form_commerce_checkout_form_alter(&$form, &$form_state) {
    if (! empty($form['commerce_payment']['payment_method'])) {
        $order = $form_state['order'];
        $price = $order->commerce_order_total['und'][0]; // price array

        $payzen_methods = array('payzen_standard', 'payzen_multi', 'payzen_paypal');

        // decimal amount
        $amount = commerce_currency_amount_to_decimal($price['amount'], $price['currency_code']);

        $instances = 0;

        foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
            list($method_id, $rule_name) = explode('|', $key);


            if (in_array($method_id, $payzen_methods)) {
                $instances++;

                if (! commerce_payzen_is_supported_currency($price['currency_code'])) {
                    unset($form['commerce_payment']['payment_method']['#options'][$key]);
                    $instances = 0;
                    break;
                }

                $settings = $order->payment_methods[$key]['settings'];
                if (! commerce_payzen_is_available($amount, $settings, $method_id)) {
                    unset($form['commerce_payment']['payment_method']['#options'][$key]);
                    $instances--;
                }
            }
        }

        if ($instances > 0) {
            // at least one instance of commerce_payzen payment method is available, include module CSS on the form
            $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_payzen') . '/theme/commerce_payzen.css';
        }
    }
}

function commerce_payzen_is_supported_currency($currency) {
    $currency_obj = PayzenApi::findCurrencyByAlphaCode($currency);

    return ! empty($currency_obj);
}

function commerce_payzen_is_available($amount, $settings, $method_id) {
    $amount_min = isset($settings['amount_restrictions']['payzen_amount_min']) ? $settings['amount_restrictions']['payzen_amount_min'] : NULL;
    $amount_max = isset($settings['amount_restrictions']['payzen_amount_max']) ? $settings['amount_restrictions']['payzen_amount_max'] : NULL;

    if (($amount_min && $amount < $amount_min) || ($amount_max && $amount > $amount_max)) {
        return FALSE;
    }

    if ($method_id == 'payzen_multi') {
        if (! isset($settings['payment_options']['payzen_multi_options'])) {
            return FALSE;
        }

        $multi_options = commerce_payzen_multi_options($settings['payment_options']['payzen_multi_options'], $amount);
        if (empty($multi_options)) {
            return FALSE;
        }
    }

    return TRUE;
}

/**
 * Payment method callback: submit form.
 */
function commerce_payzen_multi_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    if (! isset($payment_method['settings']['payment_options']['payzen_multi_options'])) {
        return;
    }

    $form = array();

    // order amount
    $price = $order->commerce_order_total['und'][0];
    $amount = commerce_currency_amount_to_decimal($price['amount'], $price['currency_code']);

    $config_options = $payment_method['settings']['payment_options']['payzen_multi_options'];
    $multi_options = commerce_payzen_multi_options($config_options, $amount);

    $options = array();
    $first = FALSE;
    foreach ($multi_options as $key => $option) {
        if (! $first) {
            $first = $key;
        }

        $options[$key] = $option['label'];
    }

    $classes = array('commerce-payzen-option');
    if (count($multi_options) == 1) {
        $classes[] = 'singleton';
    }

    $form['payzen_multi_sep'] = array(
        '#markup' => '<hr style="height: 0px;" />'
    );

    $form['payzen_multi_option'] = array(
        '#type' => 'radios',
        '#options' => $options,
        '#default_value' => $first,
        '#attributes' => array(
            'class' => $classes
        )
    );

    return $form;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_payzen_multi_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
    if (! isset($payment_method['settings']['payment_options']['payzen_multi_options'])) {
        return;
    }

    // ID of the selected payment option
    $option_id = $pane_values['payzen_multi_option'];

    $config_options = $payment_method['settings']['payment_options']['payzen_multi_options'];
    $multi_options = commerce_payzen_multi_options($config_options); // all payment options

    $order->data['commerce_payzen_multi_option'] = $multi_options[$option_id];
}

/**
 * Payment method callback: prepare form to redirect to payment platform (single and multiple payment).
 */
function commerce_payzen_redirect_form($form, &$form_state, $order, $payment_method) {
    include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'commerce_payzen') . '/includes/PayzenRequest.php';

    $payzen_request = new PayzenRequest();

    // price array
    $price = $order->commerce_order_total['und'][0];

    // currency
    $currency_obj = PayzenApi::findCurrencyByAlphaCode($price['currency_code']);
    if (! $currency_obj) {
        drupal_set_message(payzen_t('The used currency is not supported.'), 'error');
        return FALSE;
    }

    $settings = $payment_method['settings'];

    // set payment platform access parameters
    foreach ($settings['gateway_access'] as $name => $value) {
        $param_name = substr($name, strpos($name, '_') + 1);
        $payzen_request->set($param_name, $value);
    }

    // set return to shop parameters
    foreach ($settings['return_to_shop'] as $name => $value) {
        $param_name = substr($name, strpos($name, '_') + 1);
        $payzen_request->set($param_name, $value);
    }

    // return URL
    $return_url = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
    $payzen_request->set('url_return', $return_url);

    // set payment page parameters
    $payzen_request->set('capture_delay', $settings['payment_page']['payzen_capture_delay'] );
    $payzen_request->set('validation_mode', $settings['payment_page']['payzen_validation_mode']);

    $current_lang = language_default()->language;
    $default_lang = $settings['payment_page']['payzen_language'];
    $lang = PayzenApi::isSupportedLanguage($current_lang) ? $current_lang : $default_lang;
    $payzen_request->set('language', $lang);

    $languages = $settings['payment_page']['payzen_available_languages'];
    $available_languages = NULL;
    if (isset($languages) && ! empty($languages)) {
        $available_languages = is_array($languages) ? implode(';', $languages) : $languages;
    }

    $payzen_request->set('available_languages', $available_languages);

    // add sub-module specific parameters
    switch ($payment_method['method_id']) {
        case  'payzen_paypal':
            $test_mode = $payzen_request->get('ctx_mode') == 'TEST';
            $payzen_request->set('payment_cards', $test_mode ? 'PAYPAL_SB' : 'PAYPAL');
            break;

        default:
            $cards = $settings['payment_page']['payzen_payment_cards'];
            if ($cards) {
                $payzen_request->set('payment_cards', is_array($cards) ? implode(';', $cards) : $cards);
            }

            break;
    }

    // set misc parameters
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (isset($order_wrapper->commerce_customer_shipping) && isset($order_wrapper->commerce_customer_shipping->commerce_customer_address)) {
        $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
    } else {
        // if no shipping module installed
        $shipping_address = $billing_address;
    }

    // get current drupal commerce version
    $info = system_get_info('module', 'commerce');
    $version = VERSION . '_' . substr($info['version'], strpos($info['version'], '-') + 1);

    $order_params = array(
        'amount' => $price['amount'],
        'currency' => $currency_obj->getNum(),
        'contrib' => 'Drupal_Commerce7.x-1.x_1.2.0/' . $version . '/' . PHP_VERSION,
        'order_id' => $order->order_id,
        'order_info' => 'instance_id=' . $payment_method['instance_id'],

        'cust_email' => $order->mail,
        'cust_id' => $order->uid,

        'cust_name' => $billing_address['name_line'],
        'cust_first_name' => $billing_address['first_name'] ?: NULL,
        'cust_last_name' => $billing_address['last_name'] ?: NULL,
        'cust_address' => $billing_address['thoroughfare'] . ' ' . $billing_address['premise'] . ' ' . $billing_address['sub_premise'],
        'cust_state' => $billing_address['administrative_area'],
        'cust_city' => $billing_address['locality'],
        'cust_zip' => $billing_address['postal_code'],
        'cust_country' => $billing_address['country'],

        'ship_to_name' => $shipping_address['name_line'],
        'ship_to_first_name' => $shipping_address['first_name'] ?: NULL,
        'ship_to_last_name' => $shipping_address['last_name'] ?: NULL,
        'ship_to_street' => $shipping_address['thoroughfare'],
        'ship_to_street2' => $shipping_address['premise'] . ' ' . $shipping_address['sub_premise'],
        'ship_to_state' => $shipping_address['administrative_area'],
        'ship_to_city' => $shipping_address['locality'],
        'ship_to_zip' => $shipping_address['postal_code'],
        'ship_to_country' => $shipping_address['country']
    );

    $payzen_request->setFromArray($order_params);

    // activate 3ds ?
    $decimal_amount = commerce_currency_amount_to_decimal($price['amount'], $price['currency_code']);
    $threeds_mpi = NULL;
    $threeds_min_amount = $settings['selective_3ds']['payzen_3ds_min'];
    if ($threeds_min_amount != '' && $decimal_amount < $threeds_min_amount) {
        $threeds_mpi = '2';
    }

    $payzen_request->set('threeds_mpi', $threeds_mpi);

    // process multi payment option
    if ($payment_method['method_id'] == 'payzen_multi') {
        $option = $order->data['commerce_payzen_multi_option'];

        $first = $option['first'] ? round($option['first'] / 100 * $price['amount']) : NULL;
        $payzen_request->setMultiPayment(NULL, $first, $option['count'], $option['period']);

        if (isset($option['contract']) && $option['contract']) {
            $payzen_request->set('contracts', 'CB=' . $option['contract']);
        }
    }

    // set payment platform URL as form action
    $form['#action'] = $payzen_request->get('platform_url');

    foreach ($payzen_request->getRequestFieldsArray(false, false) as $name => $value) {
        $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => payzen_t('Proceed to PayZen'),
    );

    return $form;
}

/**
 * Process instant payment notifications.
 */
function commerce_payzen_process_ipn() {
    include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'commerce_payzen') . '/includes/PayzenResponse.php';

    if (! isset($_POST['vads_order_info'])) { // order_info used to store method id
        return;
    }

    $instance_id = substr($_POST['vads_order_info'], strlen('instance_id='));
    $payment_method = commerce_payment_method_instance_load($instance_id);

    if (! $payment_method) {
        return;
    }

    $settings = $payment_method['settings'];

    $payzen_response = new PayzenResponse(
        $_POST,
        $settings['gateway_access']['payzen_ctx_mode'],
        $settings['gateway_access']['payzen_key_test'],
        $settings['gateway_access']['payzen_key_prod']
    );

    if (! $payzen_response->isAuthentified()) {
        watchdog(
            'commerce_payzen',
            'Suspect request sent to commerce_payzen_process_payment, IP : %ip',
            array('%ip' => $_SERVER['REMOTE_ADDR']),
            WATCHDOG_ERROR
        );

        echo($payzen_response->getOutputForPlatform('auth_fail'));
        return FALSE;
    }

    $order_id = $payzen_response->get('order_id');

    $order = commerce_order_load($order_id);
    if (empty($order)) {
        watchdog(
            'commerce_payzen',
            'Payment check attempted on non existing order : %orderID',
            array('%orderID' => $order_id),
            WATCHDOG_ERROR
        );

        echo($payzen_response->getOutputForPlatform('order_not_found'));
        return FALSE;
    }

    if ($order->status === 'checkout_payment' || $order->status === 'pending') {
        // order waiting for payment confirmation
        watchdog('commerce_payzen', $payzen_response->getLogMessage(), array(), WATCHDOG_INFO);

        if ($payzen_response->isAcceptedPayment()) {
            echo($payzen_response->getOutputForPlatform('payment_ok'));
        } else {
            echo ($payzen_response->getOutputForPlatform('payment_ko'));
        }

        return commerce_payzen_process_transaction($order, $payment_method, $payzen_response);
    } else {
        $success_order_statuses = array ('processing', 'completed');

        // order already processed
        if (in_array($order->status, $success_order_statuses) && $payzen_response->isAcceptedPayment()) {
            echo($payzen_response->getOutputForPlatform('payment_ok_already_done'));
            return TRUE;
        } elseif (! in_array($order->status, $success_order_statuses) && ! $payzen_response->isAcceptedPayment()) {
            echo($payzen_response->getOutputForPlatform('payment_ko_already_done'));
            return FALSE;
        } else {
            echo($payzen_response->getOutputForPlatform('payment_ko_on_order_ok'));
            return FALSE;
        }
    }
}

/**
 * Payment method callback: return back to store form validation.
 */
function commerce_payzen_redirect_form_validate($order, $payment_method) {
    include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'commerce_payzen') . '/includes/PayzenResponse.php';

    $settings = $payment_method['settings'];

    $payzen_response = new PayzenResponse(
        $_REQUEST,
        $settings['gateway_access']['payzen_ctx_mode'],
        $settings['gateway_access']['payzen_key_test'],
        $settings['gateway_access']['payzen_key_prod']
    );

    if (! $payzen_response->isAuthentified()) {
        watchdog(
            'commerce_payzen',
            'Suspect request sent to commerce_payzen_redirect_form_validate, IP : %ip',
            array('%ip' => $_SERVER['REMOTE_ADDR']),
            WATCHDOG_ERROR
        );

        drupal_set_message(payzen_t('An error has occured in the payment process.'), 'error');
        return FALSE;
    }

    if (empty($order) || ! $order->order_id) {
        watchdog(
            'commerce_payzen',
            'Payment check attempted on non existing order : %orderID',
            array('%orderID' => $payzen_response->get('order_id')),
            WATCHDOG_ERROR
        );

        drupal_set_message(payzen_t('An error has occured in the payment process.'), 'error');
        return FALSE;
    }

    if (! $payzen_response->get('trans_status')) {
        // form error
        watchdog('commerce_payzen', $payzen_response->getLogMessage(), array(), WATCHDOG_ERROR);

        drupal_set_message(payzen_t('An error has occured in the payment process.'), 'error');
        return FALSE;
    }

    if ($settings['gateway_access']['payzen_ctx_mode'] == 'TEST') {
        $message = '<p><u>' . payzen_t('GOING INTO PRODUCTION') . '</u></p>';
        $message .= payzen_t('You want to know how to put your shop into production mode, please go to this URL :');
        $message .= '&nbsp;<a href="https://secure.payzen.eu/html/faq/prod" target="_blank">https://secure.payzen.eu/html/faq/prod</a>';

        drupal_set_message($message, 'notice');
    }

    if ($order->status === 'checkout_payment') {
        // order waiting for payment confirmation
        watchdog('commerce_payzen', $payzen_response->getLogMessage(), array(), WATCHDOG_INFO);

        // test mode warning : IPN URL not correctly called
        if (! $payzen_response->isCancelledPayment() && $settings['gateway_access']['payzen_ctx_mode'] == 'TEST') {
            if (variable_get('maintenance_mode', FALSE)) {
                $message = payzen_t('The shop is in maintenance mode. The automatic notification cannot work.');
            } else {
                $message = payzen_t('The automatic notification has not worked. Have you correctly set up the notification URL in your PayZen Back Office ?');
                $message .= '<br />';
                $message .= payzen_t('For understanding the problem, please read the documentation of the module : <br />&nbsp;&nbsp;&nbsp;- Chapter &laquo;To read carefully before going further&raquo;<br />&nbsp;&nbsp;&nbsp;- Chapter &laquo;Server URL settings&raquo;');
            }

            drupal_set_message($message, 'warning');
        }

        return commerce_payzen_process_transaction($order, $payment_method, $payzen_response);
    } else {
        // order already processed
        if ($payzen_response->isAcceptedPayment()) {
            return TRUE;
        } else {
            return FALSE;
        }
    }
}

/**
 * Create or save transaction.
 */
function commerce_payzen_process_transaction($order, $payment_method, $payzen_response) {
    if ($payzen_response->isCancelledPayment()) {
        commerce_payment_redirect_pane_previous_page($order, $payzen_response->getLogMessage());
        return FALSE;
    }

    $trans_id = $payzen_response->get('trans_id');
    if ($payment_method['method_id'] == 'payzen_multi' && ($sequence_number = $payzen_response->get('sequence_number'))) {
        $trans_id .= '-' . $sequence_number;
    }

    if ($transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $trans_id, 'order_id' => $order->order_id))) {
        $transaction = reset($transactions);
    } else {
        $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
        $transaction->instance_id = $payment_method['instance_id'];
    }

    $currency_code = $payzen_response->get('effective_currency');
    $amount_in_cents = $payzen_response->get('effective_amount');

    if (! $currency_code || ! $amount_in_cents) {
        $currency_code = $payzen_response->get('currency');
        $amount_in_cents = $payzen_response->get('amount');
    }

    $currency = PayzenApi::findCurrencyByNumCode($currency_code);

    $transaction->uid = $order->uid;
    $transaction->remote_id = $trans_id;
    $transaction->amount = $amount_in_cents;
    $transaction->currency_code = $currency->getAlpha3();
    $transaction->payload[REQUEST_TIME] = $_REQUEST;

    // set the transaction's statuses based on the IPN's payment_status
    $transaction->remote_status = $payzen_response->getTransStatus();

    if ($payzen_response->isPendingPayment()) {
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    } elseif ($payzen_response->isAcceptedPayment()) {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    } else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    }

    $transaction->message = $payzen_response->getCompleteMessage();

    if ($payzen_response->get('threeds_status') == 'Y') {
        $transaction->message .= ' ' . payzen_t('3DS certificate : ') . $payzen_response->get('threeds_cavv') . '.';
    }

    $transaction->message .= ' Card: @brand, Number: @number<br/>Expiration: @month/@year';
    $transaction->message_variables = array(
        '@brand' => $payzen_response->get('card_brand'),
        '@number' => $payzen_response->get('card_number'),
        '@month' => $payzen_response->get('expiry_month'),
        '@year' => $payzen_response->get('expiry_year')
    );

    // save the transaction information
    commerce_payment_transaction_save($transaction);

    if ($transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE) {
        commerce_payment_redirect_pane_previous_page($order, $payzen_response->getLogMessage());
        return FALSE;
    } else {
        commerce_payment_redirect_pane_next_page($order, $payzen_response->getLogMessage());
        return TRUE;
    }
}

function commerce_payzen_commerce_payment_order_paid_in_full($order, $transaction) {
    if (empty($order->data['payment_method'])) {
        return;
    }

    list($method_id, $instance_id) = explode('|', $order->data['payment_method']);

    $payzen_methods = array('payzen_standard', 'payzen_multi', 'payzen_paypal');
    if (! in_array($method_id, $payzen_methods)) {
        return;
    }

    commerce_order_status_update($order, 'processing', FALSE, NULL, payzen_t('Order fully paid.'));
}

function payzen_ctx_mode_options() {
    return array(
        'TEST' => payzen_t('TEST'),
        'PRODUCTION' => payzen_t('PRODUCTION')
    );
}

function payzen_language_options() {
    $languages = array();
    foreach (PayzenApi::getSupportedLanguages() as $code => $label) {
        $languages[$code] = payzen_t($label);
    }

    return $languages;
}

function payzen_validation_mode_options() {
    return array(
        '' => payzen_t('Back Office configuration'),
        '0' => payzen_t('Automatic'),
        '1' => payzen_t('Manual')
    );
}

function payzen_automatic_forward_options() {
    return array(
        '0' => payzen_t('No'),
        '1' => payzen_t('Yes')
    );
}

function payzen_return_mode_options() {
    return drupal_map_assoc(array('GET', 'POST'));
}

/**
 * Shortcut for translate method with module context.
 *
 * @param string $text
 * @param array $args
 */
function payzen_t($text, array $args = array()) {
    return t($text, $args, array('context' => 'commerce_payzen'));
}
